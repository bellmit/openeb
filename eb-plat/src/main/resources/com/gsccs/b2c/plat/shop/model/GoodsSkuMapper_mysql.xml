<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gsccs.b2c.plat.shop.dao.SkuMapper">
	<resultMap id="BaseResultMap" type="com.gsccs.eb.api.domain.goods.Sku">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="goodsid" jdbcType="BIGINT" property="goodsid" />
		<result column="serial" jdbcType="VARCHAR" property="serial" />
		<result column="title" jdbcType="VARCHAR" property="title" />
		<result column="price" jdbcType="DECIMAL" property="price" />
		<result column="mkprice" jdbcType="DECIMAL" property="mkprice" />
		<result column="storenum" jdbcType="INTEGER" property="storenum" />
		<result column="locknum" jdbcType="INTEGER" property="locknum" />
		<result column="salenum" jdbcType="INTEGER" property="salenum" />
		<result column="specids" jdbcType="VARCHAR" property="specids" />
		<result column="specstr" jdbcType="VARCHAR" property="specstr" />
		<result column="status" jdbcType="VARCHAR" property="status" />
	</resultMap>


	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, goodsid, serial, title, specids,specstr, price,mkprice,
		storenum,locknum,salenum, status
	</sql>
	<select id="selectByExample" parameterType="map" resultMap="BaseResultMap">
		select
		<if test="example.distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from eb_goods_sku
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="example.orderByClause != null">
			order by ${example.orderByClause}
		</if>
	</select>

	<select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from eb_goods_sku
		where id = #{id,jdbcType=BIGINT}
	</select>
	
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from
		eb_goods_sku
		where id = #{id,jdbcType=BIGINT}
	</delete>
	
	<delete id="deleteByExample" parameterType="map">
		delete from eb_goods_sku
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>

	<insert id="insert" useGeneratedKeys="true" keyProperty="record.id"
		parameterType="map">
		insert into eb_goods_sku (id, goodsid, serial, title,
		specids,specstr, price,mkprice, storenum,locknum,salenum,
		status)
		values (#{record.id,jdbcType=BIGINT},
		#{record.goodsid,jdbcType=BIGINT},
		#{record.serial,jdbcType=VARCHAR},
		#{record.title,jdbcType=VARCHAR},
		#{record.specids,jdbcType=VARCHAR},
		#{record.specstr,jdbcType=VARCHAR},
		#{record.price,jdbcType=DECIMAL},
		#{record.mkprice,jdbcType=DECIMAL},
		#{record.storenum,jdbcType=INTEGER},
		#{record.locknum,jdbcType=INTEGER},
		#{record.salenum,jdbcType=INTEGER},
		#{record.status,jdbcType=VARCHAR})
	</insert>

	<select id="countByExample" parameterType="map" resultType="java.lang.Integer">
		select count(*) from eb_goods_sku
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>

	<update id="updateByExample" parameterType="map">
		update eb_goods_sku
		set id = #{record.id,jdbcType=BIGINT},
		goodsid =
		#{record.goodsid,jdbcType=BIGINT},
		serial =
		#{record.serial,jdbcType=VARCHAR},
		title =
		#{record.title,jdbcType=VARCHAR},
		specids =
		#{record.specids,jdbcType=VARCHAR},
		specstr = #{record.specstr,jdbcType=VARCHAR},
		price =
		#{record.price,jdbcType=DECIMAL},
		mkprice = #{record.mkprice,jdbcType=DECIMAL},
		storenum = #{record.storenum,jdbcType=INTEGER},
		locknum = #{record.locknum,jdbcType=INTEGER},
		salenum = #{record.salenum,jdbcType=INTEGER},
		status = #{record.status,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>

	<update id="updateByPrimaryKey" parameterType="map">
		update
		eb_goods_sku
		set goodsid = #{record.goodsid,jdbcType=BIGINT},
		serial =
		#{record.serial,jdbcType=VARCHAR},
		title =
		#{record.title,jdbcType=VARCHAR},
		specids =
		#{record.specids,jdbcType=VARCHAR},
		specstr = #{record.specstr,jdbcType=VARCHAR},
		price =
		#{record.price,jdbcType=DECIMAL},
		mkprice = #{record.mkprice,jdbcType=DECIMAL},
		storenum = #{record.storenum,jdbcType=INTEGER},
		locknum = #{record.locknum,jdbcType=INTEGER},
		salenum = #{record.salenum,jdbcType=INTEGER},
		status =
		#{record.status,jdbcType=VARCHAR}
		where id =
		#{record.id,jdbcType=BIGINT}
	</update>
</mapper>