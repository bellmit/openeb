<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gsccs.b2c.plat.order.dao.OrderItemMapper" >
  <resultMap id="BaseResultMap" type="com.gsccs.b2c.plat.order.model.OrderItemT" >
    
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="orderid" property="orderid" jdbcType="BIGINT" />
    <result column="productid" property="productid" jdbcType="BIGINT" />
    <result column="skuid" property="skuid" jdbcType="BIGINT" />
    <result column="num" property="num" jdbcType="INTEGER" />
    <result column="price" property="price" jdbcType="DECIMAL" />
    <result column="accout" property="accout" jdbcType="VARCHAR" />
    <result column="buyer" property="buyer" jdbcType="VARCHAR" />
    <result column="seller" property="seller" jdbcType="VARCHAR" />
    <result column="addtime" property="addtime" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="VARCHAR" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="specstr" property="specstr" jdbcType="VARCHAR" />
    <result column="ptitle" property="ptitle" jdbcType="VARCHAR" />
    <result column="purl" property="purl" jdbcType="VARCHAR" />
    <result column="iseval" property="iseval" jdbcType="VARCHAR" />
  </resultMap>
  
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, orderid, productid, skuid, num, price, accout, buyer, seller, addtime, state,title,specstr,ptitle,purl
  </sql>
  
  
  
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="map" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from shop_orderitem_${sid}
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="map" >
    select 
    <include refid="Base_Column_List" />
    from shop_orderitem_${sid}
    where id = #{id,jdbcType=VARCHAR}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="map" >
    delete from shop_orderitem_${sid}
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  
  <delete id="deleteByExample" parameterType="map" >
    delete from shop_orderitem_${sid}
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  
  <insert id="insert" parameterType="map" keyProperty="record.id" useGeneratedKeys="true">
    insert into shop_orderitem_${sid} (id, orderid, productid, 
      skuid, num, price, accout, 
      buyer, seller, addtime, 
      state,title,specstr,ptitle,purl)
    values (#{record.id,jdbcType=VARCHAR}, #{record.orderid,jdbcType=BIGINT}, #{record.productid,jdbcType=BIGINT}, 
      #{record.skuid,jdbcType=BIGINT}, #{record.num,jdbcType=INTEGER}, #{record.price,jdbcType=DECIMAL}, #{record.accout,jdbcType=VARCHAR}, 
      #{record.buyer,jdbcType=VARCHAR}, #{record.seller,jdbcType=VARCHAR}, #{record.addtime,jdbcType=VARCHAR}, 
      #{record.state,jdbcType=VARCHAR},
      #{record.title,jdbcType=VARCHAR},
      #{record.specstr,jdbcType=VARCHAR},
      #{record.ptitle,jdbcType=VARCHAR},
      #{record.purl,jdbcType=VARCHAR})
  </insert>
  
  <select id="countByExample" parameterType="map" resultType="java.lang.Integer" >
    select count(*) from shop_orderitem_${sid}
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <update id="updateByExample" parameterType="map" >
    update shop_orderitem_${sid}
    set id = #{record.id,jdbcType=VARCHAR},
      orderid = #{record.orderid,jdbcType=BIGINT},
      productid = #{record.productid,jdbcType=BIGINT},
      skuid = #{record.skuid,jdbcType=BIGINT},
      num = #{record.num,jdbcType=INTEGER},
      price = #{record.price,jdbcType=DECIMAL},
      accout = #{record.accout,jdbcType=VARCHAR},
      buyer = #{record.buyer,jdbcType=VARCHAR},
      seller = #{record.seller,jdbcType=VARCHAR},
      addtime = #{record.addtime,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=VARCHAR},
      title = #{record.title,jdbcType=VARCHAR},
      specstr = #{record.specstr,jdbcType=VARCHAR},
      ptitle = #{record.ptitle,jdbcType=VARCHAR},
      purl = #{record.purl,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateByPrimaryKey" parameterType="map" >
    update shop_orderitem_${sid}
    set orderid = #{record.orderid,jdbcType=BIGINT},
      productid = #{record.productid,jdbcType=BIGINT},
      skuid = #{record.skuid,jdbcType=BIGINT},
      num = #{record.num,jdbcType=INTEGER},
      price = #{record.price,jdbcType=DECIMAL},
      accout = #{record.accout,jdbcType=VARCHAR},
      buyer = #{record.buyer,jdbcType=VARCHAR},
      seller = #{record.seller,jdbcType=VARCHAR},
      addtime = #{record.addtime,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=VARCHAR},
      title = #{record.title,jdbcType=VARCHAR},
      specstr = #{record.specstr,jdbcType=VARCHAR},
      ptitle = #{record.ptitle,jdbcType=VARCHAR},
      purl = #{record.purl,jdbcType=VARCHAR}
    where id = #{record.id,jdbcType=VARCHAR}
  </update>
  
  
  <select id="selectOrderItems" resultMap="BaseResultMap" parameterType="map" >
    select distinct
    <include refid="Base_Column_List" />
    from shop_orderitem_${sid}
    where orderid = ${oid}
  </select>
  
  <!-- 产品销售统计 -->
  <select id="selectProductItems" resultMap="BaseResultMap" parameterType="map" >
    select distinct
    <include refid="Base_Column_List" />
    from shop_orderitem_${sid}
    where productid = ${pid}
  </select>
  
  <select id="countProductItems" resultType="java.lang.Integer" parameterType="map" >
     select count(*) from shop_orderitem_${sid}
    where productid = ${pid}
  </select>
  
  
  <!-- 产品评价 -->
  <select id="selectIsNotEvalItems" resultMap="BaseResultMap" parameterType="map" >
    select distinct
    a.id, a.orderid, a.productid, a.skuid, a.num, a.price, a.accout, a.buyer, a.seller, a.addtime, a.state, a.title, a.specstr, a.ptitle, a.purl
    from shop_orderitem_${sid} a,shop_order_${sid} b
    where a.orderid = b.id
    and b.buyerid= ${uid}
    and a.iseval = '0'
    and b.state = '0'
    limit ${example.skip},${example.pageSize}
  </select>
  
  
</mapper>